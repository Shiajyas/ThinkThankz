<%- include("../partials/adminHeader") %>


    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">

    </head>

    <style>
        .error-message {
            color: red;
            margin-top: 5px;
            font-size: 14px;
            /* Adjust font size as needed */
        }
    </style>





    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="card mb-4">
                    <div class="card-body">

                        <form method="post" action="/admin/addProducts" enctype="multipart/form-data"
                            onsubmit="return validateForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName"
                                    class="form-control border" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
                            <div class="col-lg-4 mb-4">
                                <label class="form-label">Brand</label>
                                <select class="form-select border" name="brand">
                                    <% for (let i=0; i < brand.length; i++) { %>
                                        <option value="<%=brand[i].brandName %>">
                                            <%= brand[i].brandName %>
                                        </option>
                                        <% } %>
                                </select>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Full description</label>
                                <textarea placeholder="Type here" name="description" class="form-control border"
                                    rows="4"></textarea>
                                <div id="description" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular price</label>
                                        <input placeholder="$" name="regularPrice" type="text"
                                            class="form-control border">
                                        <div id="regularPrice-error" class="error-message"></div>

                                    </div>
                                </div>

                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Quantity</label>
                                        <input placeholder="" name="quantity" type="text" class="form-control border">
                                        <div id="quantity-error" class="error-message"></div>

                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4">
                                    <label class="form-label">Pixel</label>
                                    <select class="form-select" name="pixel">
                                        <option>1 Mp</option>
                                        <option>2 Mp</option>
                                        <option>3 Mp</option>
                                        <option>4 Mp</option>
                                        <option>5 Mp</option>
                                        <option>6 Mp</option>
                                        <option>8 Mp</option>
                                        <option>12 Mp</option>
                                      
                                    </select>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Model</label>
                                        <input placeholder="$" name="model" type="text" class="form-control border">
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Feature</label>
                                        <select class="form-select" name="feature">
                                            <option>Indoor</option>
                                            <option>Outdoor</option>
                                          
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="row gx-2">
                                        <div class="col-sm-6 mb-3">
                                            <label class="form-label">Category</label>
                                            <select class="form-select border" style="width: 150px;" name="category">
                                                <% for (let i=0; i < cat.length; i++) { %>
                                                    <option value="<%= cat[i].name %>">
                                                        <%= cat[i].name %>
                                                    </option>
                                                    <% } %>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card mb-2">
                                <div class="card-header">
                                    <h4>Choose images</h4>
                                </div>
                                <!-- <div class="border row">
                                    <div id="addedImagesContainer" class="thumbnails-container"></div>
                                </div> -->




                                <div class="row">
        <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="assets/imgs/theme/upload.svg" alt="" id="imgView1">
                                        <input class="form-control" type="file" name="images" id="input1"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage1(event), viewImage(event, 1)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg1" alt="">
                                        <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="assets/imgs/theme/upload.svg" alt="" id="imgView2">
                                        <input class="form-control" type="file" name="images" id="input2"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage2(event),viewImage(event, 2)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg2" alt="">
                                        <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="assets/imgs/theme/upload.svg" alt="" id="imgView3">
                                        <input class="form-control" type="file" name="images" id="input3"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage3(event),viewImage(event, 3)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg3" alt="">
                                        <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                        <img src="assets/imgs/theme/upload.svg" alt="" id="imgView4">
                                        <input class="form-control" type="file" name="images" id="input4"
                                            accept="image/png, image/jpeg, image/jpg"
                                            onchange="viewImage4(event),viewImage(event, 4)">
                                    </div>
                                    <div class="image-cropper d-flex align-items-center"
                                        style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                        <img src="" id="croppedImg4" alt="">
                                        <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                    </div>
                                </div>
                                



                            </div>
                            <div>
                                <button class="btn btn-md rounded font-sm hover-up" type="button"
                                    onclick="validateAndSubmit()">Publish</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Add an empty container div for displaying image thumbnails -->
    <style>
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
        }

        .thumbnail {
            margin-right: 10px;
            /* Adjust margin as needed for spacing between thumbnails */
        }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>


    <script>



        function viewImage1(event) {
            document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage2(event) {
            document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage3(event) {
            document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
        }

        function viewImage4(event) {
            document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
        }


        function viewImage(event, index) {
            let input = event.target;
            let reader = new FileReader();

            reader.onload = function () {
                let dataURL = reader.result;
                let image = document.getElementById('imgView' + index);
                image.src = dataURL;

                // Initialize Cropper.js on the image
                let cropper = new Cropper(image, {
                    aspectRatio: 1, // Square aspect ratio
                    viewMode: 1,
                    guides: true,
                    background: false,
                    autoCropArea: 1,
                    zoomable: true
                });


                // Show the image cropper container
                let cropperContainer = document.querySelector('#croppedImg' + index).parentNode;
                cropperContainer.style.display = 'block';

                // Update the cropped image when the "Save" button is clicked
                let saveButton = document.querySelector('#saveButton' + index);
                saveButton.addEventListener('click', async function () {
                    let croppedCanvas = cropper.getCroppedCanvas();
                    let croppedImage = document.getElementById("croppedImg" + index);
                    croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 1.0);

                    // Generate a unique name for the cropped image file based on the current timestamp
                    let timestamp = new Date().getTime();
                    let fileName = `cropped-img-${timestamp}-${index}.png`;

                    await croppedCanvas.toBlob(blob => {
                        let input = document.getElementById('input' + index);
                        let imgFile = new File([blob], fileName, blob)
                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        input.files = fileList.files
                    });
                    // cropperContainer.style.display = 'none';
                });
            };
            reader.readAsDataURL(input.files[0]);
        }






        // Array to store selected images
        const selectedImages = [];

        // Function to handle file input change
        document.getElementById("imageInput").addEventListener("change", handleFileSelect);

        function handleFileSelect(event) {
            // Target the container for displaying thumbnails
            const addedImagesContainer = document.getElementById("addedImagesContainer");

            // Clear previous content
            addedImagesContainer.innerHTML = "";

            const files = event.target.files;

            for (let i = 0; i < files.length; i++) {
                const file = files[i];

                // Add the file to the selected images array
                selectedImages.push(file);

                // Create thumbnail element
                const thumbnail = document.createElement("div");
                thumbnail.classList.add("thumbnail");

                // Create image element
                const img = document.createElement("img");
                img.src = URL.createObjectURL(file);
                img.alt = "thumbnail";

                // Set a fixed width for the image
                img.style.width = "50px"; // Adjust the width as needed
                img.style.height = "auto";

                // Create remove icon
                const removeIcon = document.createElement("span");
                removeIcon.classList.add("remove-icon");
                removeIcon.innerHTML = "&times;"; // Multiplication symbol as a cross

                // Event listener to remove the image on icon click
                removeIcon.addEventListener("click", function () {
                    // Remove the file from the selected images array
                    const index = selectedImages.indexOf(file);
                    if (index !== -1) {
                        selectedImages.splice(index, 1);
                    }

                    // Remove the thumbnail from the container
                    thumbnail.remove();
                });

                // Append elements to thumbnail
                thumbnail.appendChild(img);
                thumbnail.appendChild(removeIcon);

                // Append thumbnail to the container
                addedImagesContainer.appendChild(thumbnail);
            }
        }
    
        function validateForm() {
    let isValid = true;

    // Validate Product Name
    let productName = document.getElementById('product_name').value;
    if (productName.trim() === "") {
        document.getElementById('productName-error').innerText = "Product Name is required.";
        isValid = false;
    } else {
        document.getElementById('productName-error').innerText = "";
    }

    // Validate Brand
    let brand = document.querySelector('select[name="brand"]').value;
    if (brand.trim() === "") {
        alert("Please select a Brand.");
        isValid = false;
    }

    // Validate Description
    let description = document.querySelector('textarea[name="description"]').value;
    if (description.trim() === "") {
        document.getElementById('description-error').innerText = "Description is required.";
        isValid = false;
    } else {
        document.getElementById('description-error').innerText = "";
    }

    // Validate Regular Price
    let regularPrice = document.querySelector('input[name="regularPrice"]').value;
    if (regularPrice.trim() === "" || isNaN(regularPrice) || Number(regularPrice) <= 0) {
        document.getElementById('regularPrice-error').innerText = "Regular Price must be a positive number.";
        isValid = false;
    } else {
        document.getElementById('regularPrice-error').innerText = "";
    }

    // Validate Quantity
    let quantity = document.querySelector('input[name="quantity"]').value;
    if (quantity.trim() === "" || isNaN(quantity) || Number(quantity) < 0) {
        document.getElementById('quantity-error').innerText = "Quantity must be a non-negative number.";
        isValid = false;
    } else {
        document.getElementById('quantity-error').innerText = "";
    }

    // Validate Model
    let model = document.querySelector('input[name="model"]').value;
    if (model.trim() === "") {
        alert("Model is required.");
        isValid = false;
    }

    // Validate Category
    let category = document.querySelector('select[name="category"]').value;
    if (category.trim() === "") {
        alert("Please select a Category.");
        isValid = false;
    }

    // Validate Images (At least one image should be uploaded)
    let imageInputs = ['input1', 'input2', 'input3', 'input4'];
    let imageUploaded = false;
    for (let i = 0; i < imageInputs.length; i++) {
        let imageInput = document.getElementById(imageInputs[i]);
        if (imageInput.files && imageInput.files.length > 0) {
            imageUploaded = true;
            break;
        }
    }
    if (!imageUploaded) {
        alert("At least one image must be uploaded.");
        isValid = false;
    }

    return isValid;
}

// Function to be called on form submit
function validateAndSubmit() {
    if (validateForm()) {
        document.querySelector('form').submit();
    }
}


    </script>

    <%- include("../partials/adminFooter") %>